{"meta":{"title":"Haply","subtitle":"Welcome to my blog👏👏👏","description":"xiongmeng 个人博客","author":"Meng Xiong","url":"https://top319vip.github.io","root":"/"},"pages":[{"title":"search","date":"2020-10-10T06:51:10.000Z","updated":"2020-10-10T06:51:46.793Z","comments":true,"path":"search/index.html","permalink":"https://top319vip.github.io/search/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-10-22T06:49:31.704Z","updated":"2020-10-12T03:38:19.559Z","comments":false,"path":"about/index.html","permalink":"https://top319vip.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2020-10-22T06:49:31.558Z","updated":"2020-10-12T03:38:19.559Z","comments":false,"path":"categories/index.html","permalink":"https://top319vip.github.io/categories/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2020-10-22T06:49:31.485Z","updated":"2020-10-12T03:38:19.558Z","comments":false,"path":"/404.html","permalink":"https://top319vip.github.io/404.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-10-22T06:49:31.582Z","updated":"2020-10-12T03:38:19.559Z","comments":true,"path":"links/index.html","permalink":"https://top319vip.github.io/links/index.html","excerpt":"","text":""},{"title":"书单","date":"2020-10-22T06:49:31.531Z","updated":"2020-10-12T03:38:19.559Z","comments":false,"path":"books/index.html","permalink":"https://top319vip.github.io/books/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-10-22T06:49:31.637Z","updated":"2020-10-12T03:38:19.560Z","comments":false,"path":"tags/index.html","permalink":"https://top319vip.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-10-22T06:49:31.611Z","updated":"2020-10-12T03:38:19.560Z","comments":false,"path":"repository/index.html","permalink":"https://top319vip.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"你不知道的 JavaScript 代码技巧","slug":"codingSkills","date":"2020-10-10T15:23:00.000Z","updated":"2020-10-22T08:28:39.291Z","comments":true,"path":"2020/10/10/codingSkills/","link":"","permalink":"https://top319vip.github.io/2020/10/10/codingSkills/","excerpt":"","text":"聊一聊你不知道的JavaScript的代码小技巧. 隐式转换 Number 转 String 使用运算符 + 连接一个空字符串. 1288.6 + &quot;&quot;; // &quot;88.6&quot; // 等同于 String(88.6) String 转 Number 使用运算符 * 乘以 1. 12&quot;88.6&quot; * 1; // 88.6 // 等同于 Number(&quot;88.6&quot;) Number/String 转 Boolean 使用!运算符(取反). Number 转 Boolean 1234!1 // false!!1 // true!0 // true!!0 // false String 转 Boolean 常用!!&quot;&quot;来判断空字符串. 1234!&quot;&quot; // true!!&quot;&quot; // false!&quot;String&quot; // false!!&quot;String&quot; // true 在 if 代码块中，去掉大括号 单行去掉大括号 if条件表达式后面若只有一句代码，则大括号自动省略。 1if(!0 === true) alert(&#x27;单行&#x27;); 多行去掉大括号 if条件表达式后面若有多行代码，要省略大括号，则每句代码后用 , 隔开。 123if(!1 === false) alert(&#x27;首行&#x27;), alert(&#x27;多行&#x27;); Math.round 与 Math.floor Math.round 四舍五入 Math.round() 您可以使用 Number + .5 | 0: 1234815.777 + .5 | 0; // 816Math.round(815.777); // 816815.198 + .5 | 0; // 815Math.round(815.198); // 815 Math.floor 向下取整 Math.floor() 您可以使用 0 | Number or Number | 0: 120 | 671.4343; // 671Math.floor(671.4343); // 671","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://top319vip.github.io/categories/JavaScript/"}],"tags":[{"name":"Coding","slug":"Coding","permalink":"https://top319vip.github.io/tags/Coding/"}]},{"title":"正则表达式（上）","slug":"RegExp_1","date":"2020-10-10T15:23:00.000Z","updated":"2020-10-22T08:30:44.047Z","comments":true,"path":"2020/10/10/RegExp_1/","link":"","permalink":"https://top319vip.github.io/2020/10/10/RegExp_1/","excerpt":"","text":"本篇主要聊一聊关于JavaScript正则表达式的一些基础，下一篇再分享项目中常用的正则表达式. 元字符 元字符 说明 示例 示例说明 * 紧跟前面的一个或一组字符出现 0-N 次 123* 3 可出现 0-N 次 1(23)* 23 可出现 0-N 次 + 紧跟前面的一个或一组字符出现 1-N 次 123+ 3 可出现 1-N 次 1(23)+ 23 可出现 1-N 次 ? 紧跟前面的一个或一组字符出现 0-1 次 123? 3 可出现 0-1 次 1(23)? 23 可出现 0-1 次 (13|) 13 可出现 0-1 次 | 或(优先级最低) 允许多个字符的匹配 foot|food|fooc 返回其中一个 ^ 必须以 xxx 开头 ^a 必须以 a 开头 ^[0-9] 必须 0-9 开头 $ 必须以 xxx 结尾 a$ 必须以 a 结尾 [0-9]$ 必须 0-9 结尾 () 分组 和 提高优先级 foo(t|d) food 或 foot &#123;&#125; 紧跟在 {} 前面的一个或一组字符出现指定次数 (ab)&#123;2&#125; ab 可以出现 2 次 a&#123;1,3&#125; a 可以出现 1-3 次 a&#123;1,&#125; a 可以出现 1-N 次 - 连字符（如果ASCII编码是连续的 可以用 ‘-‘ 连字符） [0-9] 表示 0-9 之间的数字 \\ 转义字符,后面紧跟一个元字符 \\[\\] [] \\s [ \\t\\v\\n\\r\\f]空白字符，包括空格、tab、回车、换行等 \\S [^ \\t\\v\\n\\r\\f]非空白字符 \\w [0-9a-zA-Z_]字母、数字、下划线（非汉字）JS中和其它语言略有不同 \\W [^0-9a-zA-Z_]非字符 \\d [0-9]数字 0-9 \\D [^0-9]非数字 . [^\\n\\r\\u2028\\u2029]通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外 匹配模式 标志 说明 g 表示该表达式将用来在输入字符串中查找所有可能的匹配，返回的结果可以是多个。如果不加/g最多只会匹配一个 i 表示匹配的时候不区分大小写 m 表示多行匹配，什么是多行匹配呢？就是匹配换行符两端的潜在匹配。影响正则中的^$符号 正则表达式对象由正则表达式创建的对象，该对象可以进行 匹配，提取、查找 和 替换 创建正则表达式对象 构造函数12// const regex = new RegExp( 正则表达式[匹配模式（可选）]);const regex = new RegExp(/^[\\d][\\w]$/g); 字面量123// const regex = /正则表达式/;const regex1 = /^[\\d][\\w]$/;const regex2 = /^[\\d][\\w]$/g; 使用正则匹配（test） 对一段符串进行正则匹配，匹配结果返回 true或 false. 语法：正则对象.test(字符串); 12345const str = &#x27;Welcome to my Blog!&#x27;; // 任意字符串const reg1 = new RegExp(&#x27;Blog&#x27;); // 创建正则对象const reg2 = /Blog/; // or 创建正则对象const result = reg2.test(str); // 在字符串 str 里面匹配console.log(result); // true 使用正则提取（exec） 对一段符串进行正则提取，提取结果以数组返回. 语法：正则对象.exec(字符串); 返回值说明： [“提取到的值”, 提取到第一个字符的下标, “原始字符串”] 1234const str = &#x27;今天是2020-10-10日，星期六。&#x27;; // 任意字符串const reg = /\\d+/; // 创建正则对象const result = reg.exec(str); // 在字符串 str 里面进行提取console.log(result); // [&quot;2020&quot;, index: 3, input: &quot;今天是2020-10-10日，星期六。&quot;, groups: undefined] 循环提取 调用exec首先获得第一个匹配项，再重复调用，直到最后全部匹配完成返回 null. 12345678910const str = &#x27;今天是2020-10-10日，星期六。&#x27;; // 任意字符串const reg = /\\d+/g; // 创建正则对象, 加个g全局匹配for(let result = !0; result;)&#123; result = reg.exec(str); console.log(result); // 循环输出提取结果&#125;// [&quot;2020&quot;, index: 3, input: &quot;今天是2020-10-10日，星期六。&quot;, groups: undefined]// [&quot;10&quot;, index: 8, input: &quot;今天是2020-10-10日，星期六。&quot;, groups: undefined]// [&quot;10&quot;, index: 11, input: &quot;今天是2020-10-10日，星期六。&quot;, groups: undefined]// null 分组提取 分组规则：找对应的()圆括号. 12345678910111213141516171819202122const str = &#x27;xiaoming@163.com, xiaohong@126.com&#x27;; // 邮箱字符串const reg = /([a-zA-Z\\d]+)@([a-zA-Z\\d]+(\\.[a-zA-Z\\d]+)+)/g; // 创建正则对象, 用()分组,加个g全局匹配for(let result = !0; result;)&#123; result = reg.exec(str); console.log(result); // 循环输出提取结果&#125;// [&quot;xiaoming@163.com&quot;, &quot;xiaoming&quot;, &quot;163.com&quot;, &quot;.com&quot;, index: 0, input: &quot;xiaoming@163.com, xiaohong@126.com&quot;, groups: undefined]// [&quot;xiaohong@126.com&quot;, &quot;xiaohong&quot;, &quot;126.com&quot;, &quot;.com&quot;, index: 18, input: &quot;xiaoming@163.com, xiaohong@126.com&quot;, groups: undefined]// nul// 返回捕获的结果[ 0: &quot;xiaoming@163.com&quot; // 返回的所有匹配项 1: &quot;xiaoming&quot; // 返回第一组匹配结果, 正则：([a-zA-Z\\d]+) 2: &quot;163.com&quot; // 返回第二组匹配结果, 正则：([a-zA-Z\\d]+(\\.[a-zA-Z\\d]+)+) 3: &quot;.com&quot; // 返回第三组匹配结果, 正则：(\\.[a-zA-Z\\d]+) groups: undefined index: 0 // 匹配第一个结果的下标 input: &quot;xiaoming@163.com, xiaohong@126.com&quot; // 原始字符串 length: 4] 反向引用 截取字符串中的一个html标签 12345const str = &#x27;&lt;div&gt;Hellow&lt;/div&gt;&lt;p&gt;&lt;/p&gt;Word&lt;span&gt;!&lt;/span&gt;&#x27;;const reg = /&lt;(\\w+).*&lt;\\/\\1&gt;/g;const result = reg.exec(str);console.log(result);// [&quot;&lt;div&gt;Hellow&lt;/div&gt;&quot;, &quot;div&quot;, index: 0, input: &quot;&lt;div&gt;Hellow&lt;/div&gt;&lt;p&gt;&lt;/p&gt;Word&lt;span&gt;!&lt;/span&gt;&quot;, groups: undefined] 分析： \\w+匹配查找至少一个\\w的字符串 \\/因为/为特殊字符，所以需要用转义符 \\1反向引用(\\w+) 贪婪模式 凡是再正则表达式中，涉及次数限定的，一般默认都尽可能的多匹配 贪婪性能 高于 非贪婪模式 取消贪婪模式： 在次数限定符后面加上一个?问号 &lt;(\\w+)&gt;.*?&lt;\\/1&gt; 多个贪婪在一起的强度 123456/(\\d+)(\\d+)(\\d+)/.exec(&#x27;1234567&#x27;) // [&quot;1234567&quot;, &quot;12345&quot;, &quot;6&quot;, &quot;7&quot;]/(\\d+)(\\d+)(\\d+?)/.exec(&#x27;1234567&#x27;) // [&quot;1234567&quot;, &quot;12345&quot;, &quot;6&quot;, &quot;7&quot;]/(\\d+)(\\d+?)(\\d+)/.exec(&#x27;1234567&#x27;) // [&quot;1234567&quot;, &quot;12345&quot;, &quot;6&quot;, &quot;7&quot;]/(\\d+?)(\\d+)(\\d+)/.exec(&#x27;1234567&#x27;) // [&quot;1234567&quot;, &quot;1&quot;, &quot;23456&quot;, &quot;7&quot;]/(\\d+?)(\\d+?)(\\d+)/.exec(&#x27;1234567&#x27;) // [&quot;1234567&quot;, &quot;1&quot;, &quot;2&quot;, &quot;34567&quot;]/(\\d+?)(\\d+?)(\\d+?)/.exec(&#x27;1234567&#x27;) // [&quot;123&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;] 分析： 数组第 0 项 为捕获的所有结果 第 1 项 为分组1 即 $1 第 2 项 为分组2 即 $2 第 3 项 为分组3 即 $3 匹配但不捕获 语法：(?: 忽略捕获该匹配项 ) 12345678910111213141516171819202122const str = &#x27;xiaoming@163.com, xiaohong@126.com&#x27;; // 邮箱字符串const reg = /([a-zA-Z\\d]+)@([a-zA-Z\\d]+(?:\\.[a-zA-Z\\d]+)+)/g; // 创建正则对象, 用()分组,加个g全局匹配for(let result = !0; result;)&#123; result = reg.exec(str); console.log(result); // 循环输出提取结果&#125;// [&quot;xiaoming@163.com&quot;, &quot;xiaoming&quot;, &quot;163.com&quot;, index: 0, input: &quot;xiaoming@163.com, xiaohong@126.com&quot;, groups: undefined]// [&quot;xiaohong@126.com&quot;, &quot;xiaohong&quot;, &quot;126.com&quot;, index: 18, input: &quot;xiaoming@163.com, xiaohong@126.com&quot;, groups: undefined]// nul// 返回捕获的结果[ 0: &quot;xiaoming@163.com&quot; // 返回的所有匹配项 1: &quot;xiaoming&quot; // 返回第一组匹配结果, 正则：([a-zA-Z\\d]+) 2: &quot;163.com&quot; // 返回第二组匹配结果, 正则：([a-zA-Z\\d]+(\\.[a-zA-Z\\d]+)+)// 3: &quot;.com&quot; // 返回第三组匹配结果, 正则：( ?: \\.[a-zA-Z\\d]+) 该项捕获被忽略结果不会放到数组 groups: undefined index: 0 // 匹配第一个结果的下标 input: &quot;xiaoming@163.com, xiaohong@126.com&quot; // 原始字符串 length: 4] 正则替换 (replace) 基础参数用法 字符串.replace ( 正则表达式，字符串 )，返回字符串。 12345678910var str = &#x27;aaa-----bbb------ccc&#x27;console.log(str.replace(/-+/,&#x27;-&#x27;)); // aaa-bbb------ccc 替换一项console.log(str.replace(/-+/g,&#x27;-&#x27;)); // aaa-bbb-ccc 全局替换// 基本替换&#x27;abc123&#x27;.replace(/(\\d+)/,&#x27;d&#x27;); // abcd// 分组替换 &#x27;abc123&#x27;.replace(/(\\d+)/,&#x27;d$1&#x27;); // abcd123 $1 得到前捕获的结果// 组引用 (日期引用)&#x27;1991-2-26&#x27;.replace (/(\\d+)-(\\d+)-(\\d+)/, &#x27;$1年$2月$3日&#x27;); // 1991年2月26日 &#x27;1991-2-26&#x27;.replace (/(\\d+)-(\\d+)-(\\d+)/, &#x27;$3/$2/$1&#x27;); // 26/2/1991 函数参数的用法 字符串.replace ( 正则表达式，函数 )，返回字符串。 1234567891011121314151617/** * 将用户名 变成 x*******@163.com、x*******@126.com 的形式 * result：返回所有结果 * $1：第一个分组的结果 * $2：第二个分组的结果 * $3：第三个分组的结果 **/const str = &#x27;xiaoming@163.com, xiaohong@126.com&#x27;;str.replace(/(\\w+)@(\\w+(\\.\\w+)+)/g, function(result, $1, $2, $3)&#123; var first = $1.charAt(0); var star = []; for(var i = 0; i &lt; $1.length; i++)&#123; star.push(&#x27;*&#x27;); &#125; return first + star.join(&#x27;&#x27;)+&#x27;@&#x27;+$2;&#125;);// &quot;x********@163.com, x********@126.com&quot; 下一篇分享项目常用的正则表达式.","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://top319vip.github.io/categories/JavaScript/"}],"tags":[{"name":"RegExp","slug":"RegExp","permalink":"https://top319vip.github.io/tags/RegExp/"},{"name":"Coding","slug":"Coding","permalink":"https://top319vip.github.io/tags/Coding/"}]},{"title":"正则表达式（下）","slug":"RegExp_2","date":"2020-10-10T15:23:00.000Z","updated":"2020-10-22T08:30:28.501Z","comments":true,"path":"2020/10/10/RegExp_2/","link":"","permalink":"https://top319vip.github.io/2020/10/10/RegExp_2/","excerpt":"","text":"本篇主要聊一聊关于项目中常用的JavaScript正则表达式. 去除HTML标签之间空字符场景：之前碰到过一个问题，由于标签之间空格、换行符导致页面布局塌陷，用正则/ *[\\r|\\n] */gm去除即可。 1234567891011121314151617const str = `&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-cache, no-store, must-revalidate&quot; /&gt; &lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot; /&gt; &lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot; /&gt; &lt;title&gt;TEST&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;app&quot;&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt;`console.log(str.replace(/ *[\\r|\\n] */gm, &#x27;&#x27;));// &quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-cache, no-store, must-revalidate&quot; /&gt;&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot; /&gt;&lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot; /&gt;&lt;title&gt;BMW-SPARK&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot; 去除HTML标签场景：去除HTML标签，只获取标签里面的文本。 123const str = &#x27;&lt;div style=&quot;color:skyblue;&quot;&gt;Hellow&lt;/div&gt;&lt;p&gt;&lt;/p&gt;Word&lt;span&gt;!&lt;/span&gt;&#x27;;const result = str.replace(/&lt;[^&gt;]+&gt;/g,&quot;&quot;);console.log(result); // &quot;HellowWord!&quot; 去除HTML特定标签场景：去除特定的HTML标签（包括标签属性、标签里面的内容）。 123const str = &#x27;&lt;div style=&quot;color:skyblue;&quot;&gt;Hellow&lt;/div&gt;&lt;p&gt;&lt;/p&gt;Word&lt;span&gt;!&lt;/span&gt;&#x27;;const result = str.replace(/&lt;(div)(([\\s\\S])*?)&gt;.*&lt;\\/\\1&gt;/g, &#x27;&#x27;);console.log(result); // &quot;&lt;p&gt;&lt;/p&gt;Word&lt;span&gt;!&lt;/span&gt;&quot; 去除HTML标签属性场景：去除特定的HTML标签属性、行内样式等。 123const str = &#x27;&lt;div style=&quot;color:skyblue;&quot;&gt;Hellow&lt;/div&gt;&lt;p&gt;&lt;/p&gt;Word&lt;span&gt;!&lt;/span&gt;&#x27;;const result = str.replace(/(&lt;[^\\s\\/&gt;]+)\\b[^&gt;]*&gt;/gi, &quot;$1&gt;&quot;)console.log(result); // &quot;&lt;div&gt;Hellow&lt;/div&gt;&lt;p&gt;&lt;/p&gt;Word&lt;span&gt;!&lt;/span&gt;&quot;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://top319vip.github.io/categories/JavaScript/"}],"tags":[{"name":"RegExp","slug":"RegExp","permalink":"https://top319vip.github.io/tags/RegExp/"},{"name":"Coding","slug":"Coding","permalink":"https://top319vip.github.io/tags/Coding/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-10-10T03:32:40.152Z","updated":"2020-10-21T10:18:14.496Z","comments":true,"path":"2020/10/10/hello-world/","link":"","permalink":"https://top319vip.github.io/2020/10/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://top319vip.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://top319vip.github.io/tags/JavaScript/"}]}],"categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://top319vip.github.io/categories/JavaScript/"}],"tags":[{"name":"Coding","slug":"Coding","permalink":"https://top319vip.github.io/tags/Coding/"},{"name":"RegExp","slug":"RegExp","permalink":"https://top319vip.github.io/tags/RegExp/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://top319vip.github.io/tags/JavaScript/"}]}